# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_47yOEZrV8jYP1Cyjv2stRKOazTnPjno
"""

import csv
import numpy as np
import math

def loadData(path):
    f = open(path, "r")
    data = csv.reader(f) 
    data = np.array(list(data))
    data = np.delete(data, 0, 0)
    data = np.delete(data, 0, 1) 
    np.random.shuffle(data) 
    f.close()
    #Tu 1 den 100 la tap train
    trainSet = data[:100] 
    #Con lai lÃ  tap test
    testSet = data[100:]
    return trainSet, testSet

def tinhKC(a, b, n=4):
    tmp = 0
    for i in range(n):
        tmp += (float(a[i]) - float(b[i])) ** 2
    return math.sqrt(tmp)

def NearestNeighbor(trainSet, point, k):
    distances = []
    for item in trainSet:
        distances.append({
            "label": item[-1],
            "value": tinhKC(item, point)
        })
    distances.sort(key=lambda x: x["value"])
    labels = [item["label"] for item in distances]
    return labels[:k]

def findMax(arr):
    labels = set(arr) # set label
    ans = ""
    max = 0
    for label in labels:
        num = arr.count(label)
        if num > max:
            max = num
            ans = label
    return ans

if __name__ == "__main__":
    trainSet, testSet = loadData("./Iris.csv")
    for item in testSet:
        knn = NearestNeighbor(trainSet, item, 5)
        answer = findMax(knn)
        print("label: {} -> predicted: {}".format(item[-1], answer))

